//Factorial Calculator:	8!
mov 2, #1; 01001 1 00010 00000 0000000000000001
mov 1, #1; 01001 1 00001 00000 0000000000000001

mul 1, 2,1; 00010 0 00001 00010 00001 00000000000
add 2, 2, #1;00000 1 00010 00010 00000 00000000001
mul 1, 2,1; 00010 0 00001 00010 00001 00000000000
add 2, 2, #1;00000 1 00010 00010 00000 00000000001
mul 1, 2,1; 00010 0 00001 00010 00001 00000000000
add 2, 2, #1;00000 1 00010 00010 00000 00000000001
mul 1, 2,1; 00010 0 00001 00010 00001 00000000000
add 2, 2, #1;00000 1 00010 00010 00000 00000000001
mul 1, 2,1; 00010 0 00001 00010 00001 00000000000
add 2, 2, #1;00000 1 00010 00010 00000 00000000001
mul 1, 2,1; 00010 0 00001 00010 00001 00000000000
add 2, 2, #1;00000 1 00010 00010 00000 00000000001
mul 1, 2,1; 00010 0 00001 00010 00001 00000000000
add 2, 2, #1;00000 1 00010 00010 00000 00000000001
mul 1, 2,1; 00010 0 00001 00010 00001 00000000000
add 2, 2, #1;00000 1 00010 00010 00000 00000000001
mul 1, 2,1; 00010 0 00001 00010 00001 00000000000
add 2, 2, #1;00000 1 00010 00010 00000 00000000001
read 2, 1; 11111 0 00000 00010 00001 00000000000


//Load Store Test


mov 2, #5;	01001 1 00010 00000 0000000000000101
mov 1, #10;	01001 1 00001 00000 0000000000001010
st 2, 5[4];	01111 1 00010 00100 0000000000000101
st 1, 4[4];	01111 1 00001 00100 0000000000000100
ld 5, 5[4];	01110 1 00101 00100 0000000000000101
ld 10, 4[4];	01110 1 01010 00100 0000000000000100
add 4 5, 10;	00000 0 00100 00101 01010 00000000000
add 20, 20, 20	00000 0 10100 10100 10100 00000000000	
nop
nop
nop
read 4, 5;	11111 0 00000 00100 00101 00000000000

with loop:
mov 0, #1; 01001 1 00000 00000 0000000000000001
mov 1, #1; 01001 1 00001 00000 0000000000000001
mov 2, #9; 01001 1 00010 00000 0000000000001001

mul 1, 0,1; 	00010 0 00001 00000 00001 00000000000
add 0, 0, #1;	00000 1 00000 00000 00000 00000000001
cmp 2, 0;	00101 0 00000 00010 00000 00000000000
bgt #-3;	10001 1 11111 11111 11111 11111111101
read 1, 2;	11111 0 00000 00001 00010 00000000000



//Modulo Operator Test
mov 0, #98;	01001 1 0000 0000 000000000001100010
mov 1, #23;	01001 1 0001 0000 000000000000010111
mod 2, 0, 1;	00100 0 0010 0000 0001 00000000000000
read 0, 2;	11111 0 0000 0000 0010 00000000000000

//Prime Checker:
mov 1, #23;	01001 1 0001 0000 000000000000010111
mov 2, #2;	01001 1 0010 0000 000000000000000010
mod 3, 1, 2;	00100 0 0011 0001 0010 00000000000000
cmp 3, #0;	00101 1 0000 0011 0000 00000000000000
beq #6		10000 0 0000 0000 0000 00000000000110
add 2, 2, #1;	00000 1 0010 0010 0000 00000000000001
cmp 1, 2;	00101 0 0000 0001 0010 00000000000000
bgt #-5;	10001 1 1111 1111 1111 11111111111011
mov 0, #1;	01001 1 0000 0000 000000000000000001
read 0, 1;	11111 0 0000 0000 0001 00000000000000
mov 0, #0;	01001 1 0000 0000 000000000000000000
read 0, 1;	11111 0 0000 0000 0001 00000000000000




//Running
mov 0, #3;
mov 1, #1;
loop:
cmp 1, #5;
beq  stop;  //Jumps to invalis instruction and execution stops
add 0, 0, #3;
add 1, 1, #1;
b loop;
end:
mul 3, 0, 1; // never executes

ram[0] = 0;
ram[4] = 32'b01001 1 0000 0000 000000000000000011;
ram[8] = 32'b01001 1 0001 0000 000000000000000001;
ram[12]= 32'b00101 1 0001 0000 000000000000000101; //loop
ram[16]= 32'b10000 0 0000 0000 000000000000100000;
ram[20]= 32'b00000 1 0000 0000 000000000000000011;
ram[24]= 32'b00000 1 0001 0001 000000000000000001;
ram[28]= 32'b10010 1 1111 1111 111111111111111100;
ram[32]= 32'b00010 0 0011 0000 0000 00000000000000;
